/*
输入格式：
m n
w1 c1
w2 c2
w3 c3
......
wm-1 cn-1
wm cn
*/
// 01背包
#include<iostream>                                              //头文件
using namespace std;                                            //命名空间
int w[200];                                                     //重量
int c[200];                                                     //价值
int f[200][200];                                                //最优解
int main(){                                                     //面函数
    int m=0,n=0;                                                //背包容量，物品个数
    cin>>m>>n;                                                  //输入背包容量，物品个数
    for(int i=1;i<=n;i++)                                       //循环输入物品
        cin>>w[i]>>c[i];                                        //输入重量，价值
    for(int i=1;i<=n;i++){                                      //动态规划
        for(int j=1;j<=m;j++){                                  //遍历
            if(j>=w[i]){                                        //判断当前物品是否可以放进包中
                f[i][j] = max(f[i-1][j-w[i]]+c[i], f[i-1][j]);  //决策，是否要放入包中，最优解
            }else{                                              //否则
                f[i][j] = f[i-1][j];                            //直接拉下来
            }                                                   //继续
        }                                                       //继续
    }                                                           //继续
    cout<<f[n][m];                                              //输出最优解
    return 0;                                                   //结束
}   //}

//决策部分伪代码
/*
如果包包能装得下好东西，那么：
    f[i][j] = 选择最大的(包包腾地然后放好东西后的价值, 原来的价值)
否则：
    继续
*/